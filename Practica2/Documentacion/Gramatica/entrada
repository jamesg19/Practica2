#Esto es un comentario de línea



#Estructura 



Wison ¿

Lex {:





    # Declaración de terminales de la forma:

    # Terminal $_NOMBRE <- EXPRESIÓN ;

       

    Terminal $_Una_A     <- ‘a’ ;    # cualquier carácter alfanumérico por separado

    Terminal $_Mas       <- ‘+’ ;    # cualquier carácter especial por separado

    Terminal $_Punto     <- ‘.’ ;    # cualquier carácter especial por separado

    Terminal $_P_Ab      <- ‘(’ ;    # cualquier carácter especial por separado

    Terminal $_P_Ce      <- ‘)’ ;    # cualquier carácter especial por separado

    Terminal $_FIN       <- ‘FIN’;   

# cualquier palabra reservada minusculas

    Terminal $_NUMERO    <- [aA-zZ] ;  # Digitos del 0 al 9

    Terminal $_NUMEROS   <- [aA-zZ]* ; # Estrella de Kleene para hacer 0 o n veces

    Terminal $_NUMEROS_7 <- [0-9]+ ; # Cerradura positiva para hacer 1 on veces

    Terminal $_NUMEROS_As5 <- [0-9]?;  # reconoce la cláusula ? para hacer 0 o 1 vez 

    #Terminal $_Decimal_   <- ([0-9]*)($_Punto)($_NUMEROS_2) # terminal combinado



:} Syntax {{: ||

   # Declaración de no terminales de la forma

   # No_Terminal %_Nombre ;



   No_Terminal %_Prod_A; 

   No_Terminal %_Prod_B;

   No_Terminal %_Prod_C;

   No_Terminal %_S;

   

   

   # Simbolo inicial de la forma

   # Initial_Sim %_Nombre ;

 

   Initial_Sim %_S ;



   #Todo símbolo no terminal debe ser declarado antes de usarse en las producciones

   # Las producciones son de la siguiente forma

   # %_Initial_Sim  <= %_Prod_A ... %_No_terminal_N o $_Terminal_N ... ;

   

   %_S <= %_Prod_A $_FIN ;

   %_Prod_A <= $_P_Ab %_Prod_B $_P_Ce ;

   %_Prod_B <= %_Prod_B %_Prod_C  %_Prod_C ;

   %_Prod_C <= $_Una_A $_Mas $_Una_A  ;

:}}



? Wison

